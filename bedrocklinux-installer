#!/bin/sh
### Bedrock Linux 1.0alpha4 Flopsie
### bedrocklinux-installer

print_help(){
cat <<EOF
Usage: bedrocklinux-installer make [components]
   or: bedrocklinux-installer install [install directory] [components]

To compile components, have "make" be the first argument and the following
arguments be components to install.  This can be done as a non-root user.  It
will also compile the dependencies.

To install components, first make them with the above instructions if they need
to be made (i.e.: if the show up under "Make and install" below).  Then run
bedrocklinux-installer with "install" as the first argument and the directory
in which you would like to install as the second argument.  The following
arguments should be a list of components to install.

The source code for the components to be compiled should be in a "src"
directory in the present working directory, either as a tarball or a directory
(such as the untarred tarball or a VCS repository).  The file or directory name
should have the name of the component, such as "busybox" or "fuse" somewhere
within it.

Temporary files are created and stored in
"/tmp/bedrocklinux-installer-tmp-$(whoami)".  This includes the development
stack (musl-gcc, fuse, etc).

Components:
Make and install:
  all           the entire (core) Bedrock Linux system.
  brc           brc (BedRock Chroot)
  bru           bru (BedRock Union filesystem)
  brp           brp (BedRock Path)
  busybox       busybox
  caputils      setcap and getcap utilities
Make only:
  devstack      the development stack (headers, musl, fuse)
  headers       linux headers
  musl          the musl c library
  fuse          the fuse libary
Install only:
  directories   create directories of core Bedrock Linux system
  plaintext     create plain text files (scripts, config files, etc)
  permissions   set permissions on the install directory

EOF
exit
}

source_help(){
	echo "Error."
	echo "Cannot find required source."
	case $task in
		"brc"|"bru"|"brp")
cat <<EOF
The source for $task should be bundled with this script.  Try deleting
everything and downloading the tarball containing this script and bundled
source from here:
    http://bedrocklinux.org/1.0alpha4/bedrock-userland-1.0alpha4.tar.gz
EOF
			exit
			;;
		"musl")
			URL="http://www.musl-libc.org"
			;;
		"linux")
			URL="https://www.kernel.org/"
			;;
		"fuse")
			URL="http://fuse.sourceforge.net/"
			;;
		"busybox")
			URL="http://fuse.sourceforge.net/"
			;;
		"cap")
			URL="http://sites.google.com/site/fullycapable"
			;;
	esac
cat <<EOF
You can probably find a tarball or VCS repo for musl here:
    $URL
This version of this installer was tested against musl version 0.9.12; newer
version will probably be fine.  Place the source (tarball or directory) in:
    $pwd/src
with a file name containing the string "$task".
EOF
	exit 1
}

announce_high(){
	echo "$1" | tee -a $log
}

announce_low(){
	echo -n "  $1... " | tee -a $log
}

abort(){
	echo "error" | tee -a $log
	echo "See log at"
	echo "$log"
	exit 1
}

check(){
	if [ $? -ne 0 ]
	then
		abort
	else
		echo "done"
	fi
}

runcmd(){
	echo ""       >>$log 2>&1
	echo "\`$@\`" >>$log 2>&1
	eval "$@"     >>$log 2>&1
}

copy_untar(){
	announce_low "Preparing $task source"
	runcmd "mkdir -p $src/$task" || abort
	if ls $pwd/src/*$task*tar* >/dev/null 2>&1
	then
		runcmd "cd $src/$task/"
		runcmd "tar xf $pwd/src/*$task*tar*"
	elif ls $pwd/src/*$task* >/dev/null 2>&1
	then
		runcmd "cp -r $pwd/src/*$task* $src/$task/"
	else
		source_help
	fi
	check
}

configure(){
	announce_low "Configuring $task"
	runcmd "cd $src/$task/"
	runcmd "cd $(ls)"
	runcmd "./configure $@"
	check
}

compile(){
	announce_low "Compiling $task"
	runcmd "cd $src/$task/"
	runcmd "cd $(ls)"
	runcmd "make -j$JOBS $@"
	check
}

install(){
	announce_low "Installing $task"
	runcmd "cd $src/$task/"
	runcmd "cd $(ls)"
	runcmd "make install $@"
	check
}

make_headers(){
	# check if already done
	if [ -n "$MAKE_HEADERS" ]; then return; fi
	# dependencies:
	#make_musl
	# (none)

	task="linux"
	announce_high "Making linux headers"
	copy_untar
	compile "headers_install INSTALL_HDR_PATH=$dev"

	MAKE_HEADERS="1"
}

make_musl(){
	# check if already done
	if [ -n "$MAKE_MUSL" ]; then return; fi
	# dependencies:
	make_headers
	# (none)

	task="musl"
	announce_high "Making musl"
	copy_untar
	configure --prefix=$dev --disable-shared --enable-static
	compile
	install # installing in /tmp, won't keep in actual install

	MAKE_MUSL="1"
}

make_fuse(){
	# check if already done
	if [ -n "$MAKE_MUSL" ]; then return; fi
	# dependencies:
	make_musl

	task="fuse"
	announce_high "Making fuse"
	copy_untar
	announce_low "Making configure script"
	runcmd "cd $src/$task/"
	runcmd "cd $(ls)"
	runcmd "./makeconf.sh"
	check
	configure --prefix=$dev --disable-shared --enable-static --disable-util --disable-example
	compile 'CC='"$dev/bin/musl-gcc"
	install


	MAKE_FUSE="1"
}

make_devstack(){
	# check if already done
	if [ -n "$MAKE_DEVSTACK" ]; then return; fi
	# dependencies:
	make_musl
	make_headers
	make_fuse

	MAKE_DEVSTACK="1"
}

busybox_set_option(){
	if grep -q "^$1=" .config
	then
		runcmd "sed 's/^$1=./$1=$2/' .config > .config-new"
		runcmd "mv .config-new .config"
	elif grep -q "^# $1 is not set" .config
	then
		runcmd "sed 's/^# $1 is not set/$1=$2/' .config > .config-new"
		runcmd "mv .config-new .config"
	else
		runcmd "echo '$1=$2' >> .config"
	fi
}

make_busybox(){
	# check if already done
	if [ -n "$MAKE_BUSYBOX" ]; then return; fi
	# dependencies:
	make_musl
	make_headers

	task="busybox"
	announce_high "Making busybox"
	copy_untar
	announce_low "Making config"
	runcmd 'cd $src/$task/'
	runcmd 'cd $(ls)'
	# use busybox's default config
	runcmd 'make defconfig'
	# ensure static
	busybox_set_option "CONFIG_STATIC" "y"
	# remove items which make compiling difficult.  if the core doesn't need
	# them, better to skip than to worry about patching
	busybox_set_option "CONFIG_INETD" "n"
	check
	announce_low "Fixing miscellaneous busybox-musl issues"
	runcmd "cd $dev/include/netinet/"
	runcmd "awk '{p=1}/^struct ethhdr/,/^}/{print \"//\"\$0; p=0}p==1' if_ether.h > if_ether.h.new"
	runcmd "mv if_ether.h.new if_ether.h"
	check
	compile "CC=$dev/bin/musl-gcc"

	MAKE_BUSYBOX="1"
}

make_caputils(){
	# check if already done
	if [ -n "$MAKE_CAPUTILS" ]; then return; fi
	# dependencies:
	make_musl

	announce_high "Making caputils"
	task="cap"
	copy_untar
	compile
	install DESTDIR=$dev prefix=/ RAISE_SETFCAP=NO

	MAKE_CAPUTILS="1"
}

if [ "$1" != "make" ] && [ "$1" != "install" ]
then
	print_help
fi

tmp="/tmp/bedrocklinux-installer-tmp-$(whoami)"
src="$tmp/src"
dev="$tmp/dev"
log="$tmp/log"
pwd="$(pwd)"

echo "-----------------------------------------"
echo "Bedrock Linux 1.0alpha4 Flopsie installer"
echo "-----------------------------------------"
echo ""

if [ -e $tmp ]
then
	echo -n "Removing previous run... "
	rm -rf $tmp
	echo "done"
fi
echo -n "Making temporary directory structure... "
mkdir -p $tmp
mkdir -p $src
mkdir -p $dev
touch $log
echo "done"
announce_high "Starting logging at"
echo "$log"
echo "(consider tail -f)"
echo ""

if [ "$1" = "make" ]
then
	while [ -n "$2" ]
	do
		shift
		case $1 in
			"musl")
				make_musl
				;;
			"headers")
				make_headers
				;;
			"fuse")
				make_fuse
				;;
			"devstack")
				make_devstack
				;;
			"busybox")
				make_busybox
				;;
			"caputils")
				make_caputils
				;;
			"*")
				abort "\"$1\" is not a valid component."
				;;
		esac
	done
elif [ "$1" = "install" ]
then
	shift
	echo "--"
fi
